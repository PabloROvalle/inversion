module read_file

  implicit none
  
contains

  subroutine read_fuel(file_in,lat,mui,mue,fwhm,p_mol,vmr,file_opa)
    
    use declaration, only : nmol
    implicit None

    character (len=7) :: gas
    character (len=50), intent(in) :: file_in
    character (len=68), dimension(nmol), intent(out) :: file_opa
    character (len=68) :: dump
    integer :: l, eof
    integer, intent(out) :: p_mol
    real, intent(out) :: mui, mue, fwhm, lat
    real, dimension(nmol), intent(out) :: vmr
!=============================================================================
    open(15,file=file_in,status='old',form='formatted')
    read(15,'(F7.3)')lat ; read(15,'(F7.3)')mui ; read(15,'(F7.3)')mue
    read(15,*)
    read(15,'(F7.3)')fwhm
    read(15,*)
    
    do l=1, nmol
       read(15,'(A7,E10.3)',iostat=eof)gas, vmr(l)
       if (eof /= 0) exit
       file_opa(l) = '/obs/tfouchet/data/opacite/jupiter/jwst/jupiter_ch4_' // trim(adjustl(gas)) // '.opa'
       p_mol = l
    end do

    close(15)

  end subroutine read_fuel

  subroutine read_pta(file_in,p_mol,vmr,p,T,profil)

    use declaration, only : nmol, nlevel

    implicit none
    character (len=50), intent(in) :: file_in
    integer, intent(in) :: p_mol
    integer :: k,l
    real, dimension(nmol), intent(in) :: vmr
    real, dimension(nlevel), intent(out) :: p, T
    real, dimension(nlevel,nmol), intent(out) :: profil

    !====================================================
    open(9,file=file_in,status='old',form='formatted')
    do k=1, nlevel
       read(9,'(E9.2,F6.1,3E9.2)') p(k), T(k), (profil(k,l),l=1,p_mol)
    end do

    do l=1, p_mol
       profil(:,l) = profil(:,l) * vmr(l)
    end do

  end subroutine read_pta

  subroutine read_spe(file_in,wave,spectre,error)

    implicit none
    character (len=50), intent(in) :: file_in
    integer :: nflux,j
    real, dimension(:), allocatable, intent(out) :: wave, spectre, error

!===============================================================    
    open(12,file=file_in,status='old',form='formatted')
    read(12,*) nflux
    allocate(wave(nflux),spectre(nflux),error(nflux))
    do j=1, nflux
       read(12,*) wave(j), spectre(j), error(j)
    enddo
    close(12)

  end subroutine read_spe
  
end module read_file
